#!/usr/bin/env python

import os, sys, argparse
import subprocess
import pydicom
import filecmp

def run_cmd(sys_cmd, verbose=False):
    # one line call to output system command and control debug state
    if (verbose):
        print sys_cmd
    p = subprocess.Popen(sys_cmd, stdout = subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, errors = p.communicate()
    return output, errors

def isDICOM(filepath):
    cmd_file = 'file "%s"' % (filepath)
    output, errors = run_cmd(cmd_file)
    if ('DICOM' in output):
        return True
    else:
        return False

def checkPathExistsType(in_path):
    """Verify that a path exists, and determine whether the path is a file or a directory"""
    if (not os.path.exists(in_path)):
        print 'Error: Path does not exist: '+in_path
        sys.exit()

    if (os.path.isdir(in_path)):
        is_file = False
    elif (os.path.isfile(in_path)):
        is_file = True
    else:
        print 'Error: Path is neither a directory nor a file: '+in_path
        sys.exit()
    return is_file

def pathsDisjoint(path_1, path_2, path_1_is_file, path_2_is_file):
    for path, path_other, path_is_file, path_other_is_file in [(path_1, path_2, path_1_is_file, path_2_is_file),(path_2, path_1, path_2_is_file, path_1_is_file)]:
        # Try to find path in path_other
        if path_other_is_file: # path won't be found in path_other if path_other is a file, unless path_1 == path_2, which has already been checked.
            continue
        path_abs = os.path.abspath(path)
        if path_is_file:
            for dirpath, dirnames, filenames in os.walk(path_other):    
                for filename in filenames:
                    subpath_other_abs = os.path.abspath(os.path.join(dirpath, filename))
                    if (path_abs == subpath_other_abs):
                        print "Error: Path '"+path+"' is contained in '"+path_other+"'"
                        return False
        else: # if path is a directory:
            for dirpath, dirnames, filenames in os.walk(path_other):
                for dirname in dirnames:
                    subpath_other_abs = os.path.abspath(os.path.join(dirpath, dirname))
                    if (path_abs == subpath_other_abs):
                        print "Error: Path '"+path+"' is contained in '"+path_other+"'"
                        return False
    return True

def checkSamePath(path_1, path_2, path_1_is_file, path_2_is_file):
    """Verify that path_1 and path_2 are not the same path, and that path_1 is not contained in path_2 or vice versa."""

    # Check if input paths are the same path
    if (os.path.abspath(path_1) == os.path.abspath(path_2)): 
        print "Error: Input paths are the same path."
        sys.exit()
        
    if (not pathsDisjoint(path_1, path_2, path_1_is_file, path_2_is_file)):
        sys.exit()
    return

def buildPathList(in_dir): # get paths of all files in in_dir
    pathList = []
    for dirpath, dirnames, filenames in os.walk(in_dir):
        for filename in filenames:
            pathList.append(os.path.join(dirpath, filename))

    # Sort path list
    pathList = sorted(pathList, key=lambda p: (os.path.sep not in p, p))
    return pathList

def getPathNum(path): # get, e.g., '0002' from 'path/to/file/0002AAAA.dcm'. Doesn't work for other naming conventions.
    pathNum = filter(str.isdigit, path)[-4:]
    return pathNum

def dcmdup(path_1, path_2, weak=False, verbose=False):
    # Determine whether input paths exist, and determine whether they are directories or files.
    path_1_is_file = checkPathExistsType(path_1)
    path_2_is_file = checkPathExistsType(path_2)
    
    # Verify that the two directories are not the same directory, and that one directory is not contained in the other.
    checkSamePath(path_1, path_2, path_1_is_file, path_2_is_file)
    
    # Build list containing path to every file in path_1 and path_2.
    if path_1_is_file:
        pathList1 = [path_1]
    else:
        pathList1 = buildPathList(path_1)
    if path_2_is_file:
        pathList2 = [path_2]
    else:
        pathList2 = buildPathList(path_2)

    if (not verbose):
        if (path_2_is_file):
            print "The following files are not duplicates of the file '"+path_2+"':"
        else:
            print "The following files are not duplicated in the directory '"+path_2+"':"

    for path1 in pathList1:
        copyFound = False
        exactCopy = False
        pixelCopy = False
        if isDICOM(path1):
            try:
                dcmPix1 = pydicom.dcmread(path1).PixelData
            except AttributeError: # occurs if dicom files do not have pixel data (e.g. for MRS data).
                dcmPix1 = None
                print "Warning: No pixel data:", path1
            except pydicom.errors.InvalidDicomError:
                dcmPix1 = None
                print "Warning: Invalid DICOM header:", path1            
                print
        else:
            print "Warning: File is not DICOM:", path1
            dcmPix1 = None # if non-DICOM file, there is no Pixel Data, but can still search for copy.
            
        pathNum1 = getPathNum(path1)
    
        for path2 in pathList2:
            pathNum2 = getPathNum(path2)
            if (pathNum1 == pathNum2) or (not weak):
                if filecmp.cmp(path1, path2): # If the files are identical.
                    copyFound = True
                    exactCopy = True
                    pixelCopy = True
                    break
                else:
                    if (dcmPix1 == None):
                        continue # Don't attempt to compare pixel data if first image does not have pixel data.
                    try:
                        dcmPix2 = pydicom.dcmread(path2).PixelData
                    except AttributeError:
                        continue # Don't attempt to compare pixel data if second image does not have pixel data.
                    except pydicom.errors.InvalidDicomError:
                        continue
                        
                    if (dcmPix1 == dcmPix2):
                        copyFound = True
                        pixelCopy = True
                        break
        if (verbose):
            if (not copyFound):
                print "No duplicates: '"+path1+"'"
            elif (exactCopy):
                print "Exact duplicates: '"+path1+"' and '"+path2+"'"
            elif (pixelCopy):
                print "Pixel Data duplicates: '"+path1+"' and '"+path2+"'"
        else:
            if (not copyFound):
                print path1

if (__name__ == "__main__"):
    # Create argument parser.
    description = """Input two directories. Look for copies of the first directory's 
    images in the second directory. Print a list of all files for which a copy was not 
    found in the second directory. Images for which pixel data matches but header files 
    differ are considered copies"""
    parser = argparse.ArgumentParser(description=description)
    
    # Define positional arguments.
    parser.add_argument("path_1", help="Look for copies of the files in this directory.", type=str)
    parser.add_argument("path_2", help="Look in this directory for copies of files in path_1..", type=str)
        
    # Define optional arguments.
    parser.add_argument("-w", "--weak", action="store_true", help="Only compare pairs of files if the last four numerals in their names are equal. E.g. compare 0001.dcm and 0001A, but do not compare 0001.dcm and 0002.dcm.")
    parser.add_argument("-v", "--verbose", action="store_true", help="For each file in path_1, print whether file is exactly duplicated, only PixelData duplicated, or not duplicated. By default, the files in path_1 which have neither an exact duplicate nor a PixelData duplicate are printed.")
    
    # Print help message if no args input.
    if (len(sys.argv) == 1):
        parser.print_help()
        sys.exit()
    
    # Parse arguments.
    args = parser.parse_args()
    
    # Perform check
    dcmdup(args.path_1, args.path_2, weak=args.weak, verbose=args.verbose)
