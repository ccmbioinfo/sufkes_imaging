#!/usr/bin/env python

import os, sys
import subprocess
import argparse
import pydicom

def run_cmd(sys_cmd, verbose=False):
    # one line call to output system command and control debug state
    if (verbose):
        print sys_cmd
    p = subprocess.Popen(sys_cmd, stdout = subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, errors = p.communicate()
    return output, errors

def isDICOM(filepath):
    cmd_file = 'file "%s"' % (filepath)
    output, errors = run_cmd(cmd_file)
    if ('DICOM' in output):
        return True
    else:
        return False

def dcmgood(in_path, quiet):
    """Assume study directory structure is:

    in_path/
        series_1/
            0001.dcm
            0002.dcm
            ...
        series_2/
            0001.dcm
            0002.dcm
            ...

    """
    # Check that directory exists
    if (not os.path.isdir(in_path)):
        print "Error: Input directory does not exist:", in_path
        sys.exit()

    # Generate list of series folders in input directory.
    num_files = 0
    series_dict = {}
    for dirpath, dirnames, filenames in os.walk(in_path):
        series_dict[dirpath] = sorted(filenames, key=lambda p: (os.path.sep not in p, p))
    series_dirs_ordered = sorted([series for series in series_dict], key=lambda p: (os.path.sep not in p, p))
    for series_dir in series_dirs_ordered:
        max_instance_number = 0 # store the largest instance number found.
        filenames = series_dict[series_dir]
        num_files += len(filenames)
        for filename in filenames:
            filepath = os.path.join(series_dir, filename)

            if not os.path.exists(filepath):
                print "File path does not exist:", filepath

            # Check if file is DICOM.
            if (not isDICOM(filepath)):
                print 'File is not DICOM:   ', filepath
                continue
            
            # Check if file has valid DICOM header or does not have PixelData.
            try:
                dicom = pydicom.dcmread(filepath)
                instance_number = dicom.InstanceNumber
                if (instance_number > max_instance_number):
                    max_instance_number = instance_number
                pixel_data = dicom.PixelData
            except AttributeError: # occurs if dicom files do not have pixel data (e.g. for MRS data).
                print "No pixel data:       ", filepath
            except pydicom.errors.InvalidDicomError:
                print "Invalid DICOM header:", filepath
            
            # report if max instance number is not equal to number of files in current folder
        if (len(filenames) !=  max_instance_number):
            print "Incomplete series:   ", series_dir
    if (not quiet):
        print "Number of files checked: "+str(num_files)
    return

if (__name__ == "__main__"):
    # Create argument parser.
    description = """Try to determine whether a DICOM study is complete and uncorrupted."""
    parser = argparse.ArgumentParser(description=description)
    
    # Define positional arguments.
    parser.add_argument("in_path", help="Path to DICOM study folder.", type=str)
        
    # Define optional arguments.
    parser.add_argument("-q", "--quiet", action="store_true", help="Don't print any summary information, only report problems.")
    
    # Print help message if no args input.
    if (len(sys.argv) == 1):
        parser.print_help()
        sys.exit()
    
    # Parse arguments.
    args = parser.parse_args()
    
    # Perform check
    dcmgood(args.in_path, args.quiet)
