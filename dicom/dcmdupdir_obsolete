#!/usr/bin/env python

import os, sys, argparse
import pydicom as pd
import filecmp

def buildPathList(in_dir): # get paths of all files in in_dir
    pathList = []
    for root, directories, filenames in os.walk(in_dir):
        for filename in filenames:
            pathList.append(os.path.join(root, filename))
    pathList = sorted(pathList, key=lambda p: (os.path.sep not in p, p))
    return pathList

def getPathNum(path): # get, e.g., '0002' from 'path/to/file/0002AAAA.dcm'. Doesn't work for other naming conventions.
    pathNum = filter(str.isdigit, path)[-4:]
    return pathNum

def dcmdupdir(dir_1, dir_2, compare_all=False):
    # Verify existence of specified directories.
    dirs_exist = True
    for in_dir in [dir_1, dir_2]:
        if (not os.path.isdir(in_dir)):
            print "Directory does not exist: "+in_dir
            dirs_exist = False
    if (not dirs_exist):
        sys.exit()
    
    pathList1 = buildPathList(dir_1)
    pathList2 = buildPathList(dir_2)
    
    for path1 in pathList1:
        copyFound = False
        try:
            dcmPix1 = pd.dcmread(path1).PixelData
#            print dir(pd.dcmread(path1))
#            sys.exit()
        except AttributeError: # occurs if dicom files do not have pixel data (e.g. for MRS data).
            dcmPix1 = None
            print "ERROR: No pixel data."
        pathNum1 = getPathNum(path1)
    
        for path2 in pathList2:
            pathNum2 = getPathNum(path2)
            if (pathNum1 == pathNum2) or (compare_all): # only compare files with matching names
                if filecmp.cmp(path1, path2): # If the files are identical.
                    copyFound = True
                    break
                else:
                    if (dcmPix1 == None):
                        continue # Don't attempt to compare pixel data if first image does not have pixel data.
                    try:
                        dcmPix2 = pd.dcmread(path2).PixelData
                    except AttributeError:
                        continue # Don't attempt to compare pixel data if second image does not have pixel data.
                    if (dcmPix1 == dcmPix2):
                        copyFound = True
                        break
        if (not copyFound):
            print path1

if (__name__ == "__main__"):
    # Create argument parser.
    description = """Input two directories. Look for copies of the first directory's 
    images in the second directory. Print a list of all files for which a copy was not 
    found in the second directory. Images for which pixel data matches but header files 
    differ are considered copies"""
    parser = argparse.ArgumentParser(description=description)
    
    # Define positional arguments.
    parser.add_argument("dir_1", help="Look for copies of the files in this directory.", type=str)
    parser.add_argument("dir_2", help="Look in this directory for copies of files in dir_1..", type=str)
        
    # Define optional arguments.
    parser.add_argument("-c", "--compare_all", action="store_true", help="Compare each file in dir_1 with every file in dir_2. By default, only files with 'similar' paths are compared.")
    
    # Print help message if no args input.
    if (len(sys.argv) == 1):
        parser.print_help()
        sys.exit()
    
    # Parse arguments.
    args = parser.parse_args()
    
    # Perform check
    dcmdupdir(args.dir_1, args.dir_2, compare_all=args.compare_all)
